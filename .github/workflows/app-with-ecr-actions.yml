name: Build and Push Docker Image To AWS ECR AND Deploy App
on:
  push
  # workflow_dispatch

jobs:
  ci:
    runs-on: ubuntu-latest
    outputs:
      short_sha: ${{ steps.set_sha.outputs.SHORT_SHA }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
          
      - name: Make application.properties
        run: |
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          touch ./application.properties
          echo "${{ secrets.PROPERTIES }}" > ./application.properties
        shell: bash
        
      - name: Build with Maven
        run: mvn -DskipTests -B package --file pom.xml
        
      - name: Naming jar file
        run: mv ./target/*.jar ./target/app.jar
  
      - name: Check jar file
        run: ls ./target
  
      - uses: actions/upload-artifact@v4
        with:
          name: app
          path: ./target/*.jar
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR (Private)
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_PRIVATE_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Create Short SHA
        id: set_sha
        run : |
          echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV
          echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
        # run: echo "IMAGE_TAG=$(date + '%Y%m%d-%H%M%s')" >> $GITHUB_ENV
      
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.AWS_ECR_PRIVATE_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_PRIVATE_REPOSITORY }}:${{ env.SHORT_SHA }} .

      - name: Push Docker image to Amazon ECR
        run: |
          docker push ${{ secrets.AWS_ECR_PRIVATE_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_PRIVATE_REPOSITORY }}:${{ env.SHORT_SHA }}
  cd:
    runs-on: ubuntu-latest
    needs: ci

    steps:
      - name: Execute remote SSH commands on EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          script: |
            REGION=${{ secrets.AWS_REGION }}
            ECR_REPOSITORY=${{ secrets.AWS_ECR_PRIVATE_REPOSITORY }}
            IMAGE_TAG=${{ needs.ci.outputs.short_sha }}
            ECR_ID=${{ secrets.AWS_ECR_PRIVATE_ID }}
            
            if ! command -v aws &> /dev/null
            then
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              sudo apt install unzip -y
              unzip awscliv2.zip
              sudo ./aws/install
            fi

            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set region ${{ secrets.AWS_REGION }}
            
            # cd ~/.aws
            # cat <<EOF > credentials
            # [default]
            # aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
            # aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            # region=$REGION
            # EOF

            aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $ECR_ID.dkr.ecr.$REGION.amazonaws.com
            docker pull $ECR_ID.dkr.ecr.$REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

            if [ -n "$(docker ps -q)" ]; then
              docker stop $(docker ps -q);
            fi
            if [ -n "$(docker ps -aq)" ]; then
              docker rm -f $(docker ps -aq);
            fi
            # docker stop $(docker ps -q) || true
            # docker rm $(docker ps -aq) -f || true
            
            docker run -d --name backend-server -p 8080:8080 \
            $ECR_ID.dkr.ecr.$REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
